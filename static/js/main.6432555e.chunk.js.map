{"version":3,"sources":["components/MenuButton/menu_button.js","components/Menu/menu.js","components/Square/square.js","utils/tetromino.js","components/Board/board.js","components/ScoreBoard/score_board.js","components/Help/help.js","components/Game/game.js","index.js"],"names":["MenuButton","_ref","onClick","link","text","color","react_default","a","createElement","className","href","Menu","startGame","MenuButton_menu_button","Square","concat","tetrominoColors","O","T","T1","T2","T3","L","L1","L2","L3","Lr","Lr1","Lr2","Lr3","Z","Z1","Zr","Zr1","I","I1","randTetroID","0","1","2","3","4","5","6","randomTetromino","Math","floor","random","tetrominoSquares","position","type","x","y","validTetromino","row","col","board","map","square","includes","Board","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","rows","cols","itvlId","paused","speed","state","currentPos","Array","fill","_this2","setState","newGameHandler","setInterval","dropDown","_this3","b","slice","event","_this4","pos","keyCode","ended","newType","rotatedTetromino","clearInterval","_this5","cur","finalBoard","newBoard","cleared","reduce","acc","usedSquares","filter","length","push","unshift","clearedLines","newTetro","endGameHandler","_this6","document","addEventListener","inputHandler","tap","swipeX","toggling","toggleEnd","i","j","Square_square","key","toString","Component","ScoreBoard","score","highscore","toggleHandler","Help","Game","_useState","useState","_useState2","slicedToArray","setEnded","_useState3","_useState4","setToggling","_useState5","_useState6","setHighscore","_useState7","_useState8","setScore","_useState9","_useState10","setSwipeX","_useState11","_useState12","setTap","bind","useDrag","swipe","swipeDistance","assign","help","Board_board","curScore","max","endGame","lines","score_board","App","playing","game","Menu_menu","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.6432555e.chunk.js","sourcesContent":["import './menu_button.scss';\nimport React from 'react';\n\nconst MenuButton = ({onClick, link, text, color}) => {\n\treturn <div className=\"btn-wrap\">\n\t\t<a onClick={onClick} href={link} className={\"btn btn-\" + color + \" btn-animated\"}>\n\t\t\t{text}\n\t\t</a>\n\t</div>\n};\n\nexport default MenuButton;","import './menu.scss';\nimport React from 'react';\nimport MenuButton from '../MenuButton/menu_button';\n\nconst Menu = ({startGame}) => {\n\treturn <div className=\"menu\">\n\t\t<MenuButton onClick={startGame} link=\"#\" text=\"Play\" color=\"green\"></MenuButton>\n\t</div>;\n}\n\nexport default Menu;","import React from \"react\";\n\nconst Square = ({ className, color }) => {\n  return (\n    <div\n      className={`${className +\n        (color !== \"none\" ? \" bg-\" + color + \"-600\" : \"\")}`}\n    />\n  );\n};\n\nexport default Square;\n","export const tetrominoColors = {\n   O: \"yellow\",\n   T: \"red\",\n   T1: \"red\",\n   T2: \"red\",\n   T3: \"red\",\n   L: \"blue\",\n   L1: \"blue\",\n   L2: \"blue\",\n   L3: \"blue\",\n   Lr: \"blue\",\n   Lr1: \"blue\",\n   Lr2: \"blue\",\n   Lr3: \"blue\",\n   Z: \"green\",\n   Z1: \"green\",\n   Zr: \"green\",\n   Zr1: \"green\",\n   I: \"teal\",\n   I1: \"teal\"\n};\n\nconst randTetroID = {\n   0: \"O\",\n   1: \"T\",\n   2: \"L\",\n   3: \"Lr\",\n   4: \"Z\",\n   5: \"Zr\",\n   6: \"I\"\n};\n\nexport const randomTetromino = () => {\n   return randTetroID[Math.floor(Math.random() * 7)];\n};\n\nexport const tetrominoSquares = (position, type) => {\n   const x = position[0],\n      y = position[1];\n   switch (type) {\n      case \"O\":\n         return [\n            [x, y],\n            [x + 1, y],\n            [x, y + 1],\n            [x + 1, y + 1]\n         ];\n      case \"T\":\n         return [\n            [x, y],\n            [x + 1, y],\n            [x + 1, y - 1],\n            [x + 1, y + 1]\n         ];\n      case \"T1\":\n         return [\n            [x, y],\n            [x + 1, y],\n            [x + 2, y],\n            [x + 1, y + 1]\n         ];\n      case \"T2\":\n         return [\n            [x, y],\n            [x, y + 1],\n            [x, y - 1],\n            [x + 1, y]\n         ];\n      case \"T3\":\n         return [\n            [x, y],\n            [x + 1, y],\n            [x + 2, y],\n            [x + 1, y - 1]\n         ];\n      case \"L\":\n         return [\n            [x, y],\n            [x + 1, y],\n            [x + 2, y],\n            [x + 2, y + 1]\n         ];\n      case \"L1\":\n         return [\n            [x, y],\n            [x, y + 1],\n            [x, y - 1],\n            [x + 1, y - 1]\n         ];\n      case \"L2\":\n         return [\n            [x, y],\n            [x, y + 1],\n            [x + 1, y + 1],\n            [x + 2, y + 1]\n         ];\n      case \"L3\":\n         return [\n            [x, y + 1],\n            [x + 1, y + 1],\n            [x + 1, y],\n            [x + 1, y - 1]\n         ];\n      case \"Lr\":\n         return [\n            [x, y],\n            [x + 1, y],\n            [x + 2, y],\n            [x + 2, y - 1]\n         ];\n      case \"Lr1\":\n         return [\n            [x + 1, y],\n            [x + 1, y + 1],\n            [x + 1, y - 1],\n            [x, y - 1]\n         ];\n      case \"Lr2\":\n         return [\n            [x, y],\n            [x, y + 1],\n            [x + 1, y],\n            [x + 2, y]\n         ];\n      case \"Lr3\":\n         return [\n            [x, y],\n            [x, y + 1],\n            [x, y - 1],\n            [x + 1, y + 1]\n         ];\n      case \"Z\":\n         return [\n            [x, y],\n            [x, y - 1],\n            [x + 1, y],\n            [x + 1, y + 1]\n         ];\n      case \"Z1\":\n         return [\n            [x, y + 1],\n            [x + 1, y],\n            [x + 2, y],\n            [x + 1, y + 1]\n         ];\n      case \"Zr\":\n         return [\n            [x, y],\n            [x, y + 1],\n            [x + 1, y],\n            [x + 1, y - 1]\n         ];\n      case \"Zr1\":\n         return [\n            [x, y],\n            [x + 1, y],\n            [x + 1, y + 1],\n            [x + 2, y + 1]\n         ];\n      case \"I\":\n         return [\n            [x, y],\n            [x + 1, y],\n            [x + 2, y],\n            [x + 3, y]\n         ];\n      case \"I1\":\n         return [\n            [x, y],\n            [x, y - 1],\n            [x, y + 1],\n            [x, y + 2]\n         ];\n      default:\n         return null;\n   }\n};\n\nexport const validTetromino = (position, type, row, col, board) => {\n   const squares = tetrominoSquares(position, type);\n   const r = squares.map(\n      square =>\n         square[0] >= 0 &&\n         square[0] < row &&\n         square[1] >= 0 &&\n         square[1] < col &&\n         board[square[0]][square[1]] === \"none\"\n   );\n   return !r.includes(false);\n};\n\nexport const rotatedTetromino = type => {\n   switch (type) {\n      case \"O\":\n         return \"O\";\n      case \"T\":\n         return \"T1\";\n      case \"T1\":\n         return \"T2\";\n      case \"T2\":\n         return \"T3\";\n      case \"T3\":\n         return \"T\";\n      case \"L\":\n         return \"L1\";\n      case \"L1\":\n         return \"L2\";\n      case \"L2\":\n         return \"L3\";\n      case \"L3\":\n         return \"L\";\n      case \"Lr\":\n         return \"Lr1\";\n      case \"Lr1\":\n         return \"Lr2\";\n      case \"Lr2\":\n         return \"Lr3\";\n      case \"Lr3\":\n         return \"Lr\";\n      case \"Z\":\n         return \"Z1\";\n      case \"Z1\":\n         return \"Z\";\n      case \"Zr\":\n         return \"Zr1\";\n      case \"Zr1\":\n         return \"Zr\";\n      case \"I\":\n         return \"I1\";\n      case \"I1\":\n         return \"I\";\n      default:\n         return null;\n   }\n};\n","import React, { Component } from \"react\";\nimport Square from \"../Square/square\";\nimport {\n  tetrominoColors,\n  tetrominoSquares,\n  validTetromino,\n  rotatedTetromino,\n  randomTetromino\n} from \"../../utils/tetromino\";\n\nclass Board extends Component {\n  rows = 18;\n  cols = 12;\n  itvlId = 0;\n  paused = true;\n  speed = 300;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPos: [-1, -1],\n      type: null,\n      board: Array(this.rows).fill(Array(this.cols).fill(\"none\"))\n    };\n  }\n\n  startGame() {\n    this.setState({\n      currentPos: [0, 5],\n      type: randomTetromino(),\n      board: Array(this.rows).fill(Array(this.cols).fill(\"none\"))\n    });\n    this.props.newGameHandler();\n    this.paused = false;\n    this.itvlId = setInterval(() => this.dropDown(), this.speed);\n  }\n\n  finalBoard() {\n    if (this.state.type === null) return this.state.board;\n    const b = this.state.board.map(x => x.slice());\n    tetrominoSquares(this.state.currentPos, this.state.type).map(\n      square => (b[square[0]][square[1]] = tetrominoColors[this.state.type])\n    );\n    return b;\n  }\n\n  inputHandler(event) {\n    const type = this.state.type;\n    const pos = this.state.currentPos;\n\n    switch (event.keyCode) {\n      case 37: // Left\n        if (this.paused || this.props.ended) return;\n        if (\n          validTetromino(\n            [pos[0], pos[1] - 1],\n            type,\n            this.rows,\n            this.cols,\n            this.state.board\n          )\n        )\n          this.setState({ currentPos: [pos[0], pos[1] - 1] });\n        return;\n      case 38: // Up\n        if (this.paused || this.props.ended) return;\n        let newType = rotatedTetromino(type);\n        if (\n          validTetromino(pos, newType, this.rows, this.cols, this.state.board)\n        )\n          this.setState({ type: newType });\n        return;\n      case 39: // Right\n        if (this.paused || this.props.ended) return;\n        if (\n          validTetromino(\n            [pos[0], pos[1] + 1],\n            type,\n            this.rows,\n            this.cols,\n            this.state.board\n          )\n        )\n          this.setState({ currentPos: [pos[0], pos[1] + 1] });\n        return;\n      case 40: // Down\n        // TODO: Increase drop speed\n        break;\n      case 32: // Start/Pause/Restart\n        if (this.props.ended) return this.startGame();\n        if (this.paused)\n          this.itvlId = setInterval(() => this.dropDown(), this.speed);\n        else clearInterval(this.itvlId);\n        this.paused = !this.paused;\n        break;\n      default:\n        break;\n    }\n  }\n\n  dropDown() {\n    const cur = this.state.currentPos;\n    const type = this.state.type;\n    if (\n      validTetromino(\n        [cur[0] + 1, cur[1]],\n        type,\n        this.rows,\n        this.cols,\n        this.state.board\n      )\n    ) {\n      this.setState({ currentPos: [cur[0] + 1, cur[1]] });\n    } else {\n      const board = this.finalBoard();\n      let newBoard = [];\n\n      // Count the amount of cleared lines and build the updated board\n      const cleared = board.reduce((acc, row) => {\n        const usedSquares = row.filter(x => x !== \"none\").length;\n        if (usedSquares !== 0 && usedSquares !== this.cols) {\n          newBoard.push(row);\n        } else {\n          newBoard.unshift(Array(this.cols).fill(\"none\"));\n          if (usedSquares === this.cols) return acc + 1;\n        }\n        return acc;\n      }, 0);\n\n      // Callback to inscrease score\n      if (cleared !== 0) this.props.clearedLines(cleared);\n\n      const newTetro = randomTetromino();\n      if (!validTetromino([0, 5], newTetro, this.rows, this.cols, newBoard)) {\n        // GAMEOVER\n        this.props.endGameHandler();\n        clearInterval(this.itvlId);\n        this.ended = true;\n        return;\n      }\n\n      this.setState({\n        currentPos: [0, 5],\n        type: newTetro,\n        board: newBoard\n      });\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener(\n      \"keydown\",\n      event => this.inputHandler(event),\n      false\n    );\n  }\n\n  componentDidUpdate() {\n    if (this.props.tap === 1) {\n      this.inputHandler({ keyCode: 38 });\n    }\n    if (this.props.swipeX === -1) {\n      this.inputHandler({ keyCode: 37 });\n    }\n    if (this.props.swipeX === 1) {\n      this.inputHandler({ keyCode: 39 });\n    }\n    if (this.props.toggling) {\n      this.inputHandler({ keyCode: 32 });\n    }\n    this.props.toggleEnd();\n  }\n\n  render() {\n    const board = this.finalBoard();\n    return (\n      <div className=\"table col-span-2 mx-auto sm:my-auto shadow-2xl border-2 border-white border-opacity-100\">\n        <div className=\"table-row-group\">\n          {board.map((row, i) => (\n            <div className=\"table-row\">\n              {row.map((color, j) => (\n                <Square\n                  className=\"table-cell w-6 h-6 border border-white border-opacity-25\"\n                  key={i.toString() + \" \" + j.toString()}\n                  color={color}\n                />\n              ))}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n","import React from \"react\";\n\nconst ScoreBoard = ({ score, highscore, toggleHandler, state }) => {\n  return (\n    <div className=\"flex sm:flex-col flex-row mt-10 sm:my-auto\">\n      <div className=\"flex-1 text-base text-center text-white\">SCORE</div>\n      <div className=\"flex-1 text-base text-center text-green-500 font-bold\">\n        {score}\n      </div>\n      <div className=\"flex-1 text-base text-center text-white\">HIGHSCORE</div>\n      <div className=\"flex-1 text-base text-center text-green-500 font-bold\">\n        {highscore}\n      </div>\n      <div className=\"flex flex-1\">\n        <button\n          className=\"text-base text-white shadow rounded border border-opacity-25 bg-green-500 mx-auto sm:mt-6 w-16\"\n          onClick={toggleHandler}\n        >\n          {state}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ScoreBoard;\n","import React from \"react\";\n\nconst Help = () => {\n  return (\n    <div className=\"hidden sm:block items-center justify-center text-gray-100 sm:my-10\">\n      <div className=\"my-2\">\n        <div className=\"font-extrabold\">Space </div>\n        <div className=\"description\"> Start/Pause/Restart the game</div>\n      </div>\n      <div className=\"my-2\">\n        <div className=\"font-extrabold\">Up Arrow </div>\n        <div className=\"description\"> Rotate CounterClockwise</div>\n      </div>\n      <div className=\"my-2\">\n        <div className=\"font-extrabold\">Left Arrow </div>\n        <div className=\"description\"> Move Left</div>\n      </div>\n      <div className=\"my-2\">\n        <div className=\"font-extrabold\">Right Arrow </div>\n        <div className=\"description\"> Move Right</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Help;\n","import React, { useState } from \"react\";\nimport Board from \"../Board/board\";\nimport ScoreBoard from \"../ScoreBoard/score_board\";\nimport Help from \"../Help/help\";\nimport { useDrag } from \"react-use-gesture\";\n\nconst Game = () => {\n  const [ended, setEnded] = useState(true);\n  const [toggling, setToggling] = useState(false);\n  const [highscore, setHighscore] = useState(0);\n  const [score, setScore] = useState(0);\n  const [swipeX, setSwipeX] = useState(0);\n  const [tap, setTap] = useState(0);\n\n  const bind = useDrag(\n    ({ swipe: [swipeX], tap }) => {\n      // position will either be -1, 0 or 1\n      if (swipeX) setSwipeX(swipeX);\n      if (tap) setTap(tap ? 1 : 0);\n    },\n    { swipeDistance: 1 }\n  );\n\n  const addScore = x => {\n    setScore(score + x);\n  };\n\n  const newGame = () => {\n    setEnded(false);\n    setScore(0);\n  };\n\n  const endGame = () => {\n    const curScore = score;\n    setEnded(true);\n    setHighscore(Math.max(highscore, curScore));\n  };\n\n  const toggleEnd = () => {\n    setToggling(false);\n    setSwipeX(0);\n    setTap(0);\n  };\n\n  return (\n    <div className=\"grid h-screen\" {...bind()}>\n      <div className=\"m-6 sm:m-10 grid grid-cols-1 sm:grid-cols-4 my-auto bg-blue-900\">\n        <Help />\n\n        <Board\n          toggling={toggling}\n          toggleEnd={() => toggleEnd()}\n          ended={ended}\n          swipeX={swipeX}\n          tap={tap}\n          newGameHandler={() => newGame()}\n          endGameHandler={() => endGame()}\n          clearedLines={lines => addScore(lines)}\n        />\n        <ScoreBoard\n          state={ended ? \"Start\" : \"Play\"}\n          score={score}\n          highscore={highscore}\n          toggleHandler={() => {\n            setToggling(true);\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Game;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./sass/main.scss\";\nimport \"./assets/main.css\";\nimport Menu from \"./components/Menu/menu\";\nimport Game from \"./components/Game/game\";\n\nclass App extends Component {\n   constructor(props) {\n      super(props);\n      this.state = { playing: true };\n   }\n\n   startGame() {\n      this.setState({ playing: true });\n   }\n\n   render() {\n      return (\n         <div>\n            {this.state.playing ? (\n               <Game />\n            ) : (\n               <Menu startGame={() => this.startGame()} />\n            )}\n         </div>\n      );\n   }\n}\n\n//=================================>\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}